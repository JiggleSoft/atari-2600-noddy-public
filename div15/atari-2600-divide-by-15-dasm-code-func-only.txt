; Code by Justin Lane (atari2600@jigglesoft.co.uk)
;
; Divide by 15 with modulo (remainder).
;
; RAM	 3 Bytes
; DATA	11 Bytes (+ 5 extra bytes if full range required)
; CODE  25 Bytes
;
; CPU	47 Cycles
;

	PROCESSOR	6502
 
 
        SEG.U	Vars
	ORG	$80
 
value	DS.B	1	; Input value
div15	DS.B	1	; Output divide by 15
mod15	DS.B	1	; Output modulo 15


	SEG	Code
        ORG	$F000

; Note: possible remove div15 and mod15 STA as result is returned X=div15 and A=mod15.
;       Also if LDA value change to STA value then can pass in value in A reg.
divby15	LDA	value		; ZP RAM		2	3		2	3
	LSR			; 			1	2		3	5
	LSR			; 			1	2		4	7
	LSR			; 			1	2		5	9
	LSR			; 			1	2		6	11
	SEC			; 			1	2		7	13
	ADC	value		; ZP RAM		2	3		9	16
	ROR			; 			1	2		10	18
	LSR			; 			1	2		11	20
	LSR			; 			1	2		12	22
	LSR			; 			1	2		13	24
	STA	div15		; ZP RAM		2	3		15	27
	TAX			; 			1	2		16	29
	LDA	value		; ZP RAM		2	3		18	32
	SEC			; 			1	2		19	34
	SBC	mul15table,X	; 16-bit ROM addr	3	4	*	22	38
	STA	mod15		; ZP RAM		2	3		24	41
	RTS			; 			1	6		25	47


	SEG	Data
        ORG	$F100

mul15table
	DC.B	0	; 15 *  0
	DC.B	15	; 15 *  1
	DC.B	30	; 15 *  2
	DC.B	45	; 15 *  3
	DC.B	60	; 15 *  4
	DC.B	75	; 15 *  5
	DC.B	90	; 15 *  6
	DC.B	105	; 15 *  7
	DC.B	120	; 15 *  8
	DC.B	135	; 15 *  9
	DC.B	150	; 15 * 10

mul15tablextra
	DC.B	165	; 15 * 11
	DC.B	180	; 15 * 12
	DC.B	195	; 15 * 13
	DC.B	210	; 15 * 14
	DC.B	225	; 15 * 15

